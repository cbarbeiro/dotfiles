# @Override
# Source our dotfiles so changes are available
function source-dotfiles () {
	source ~/.bash_exports
	source ~/.bash_aliases
	source ~/.bash_functions

	source ~/.bash_exports_work
	source ~/.bash_aliases_work
	source ~/.bash_functions_work
}

# @Override
# EDIT bookmarks list - work version
function bm-edit () { vim $BM_DIR $BM_DIR_WORK; }

# @Override
# CAT bookmarks list
function bm-cat () {
	if [ ! -z $BM_DIR_WORK ]; then
		cat $BM_DIR $BM_DIR_WORK | sed '/^\s*$/d'
	else
		cat $BM_DIR | sed '/^\s*$/d'
	fi
}

# ADD current dir to work bookmarks list
function bm-add-work() {
	if [ -z $BM_DIR_WORK ]; then
		echo "\$BM_DIR_WORK is not defined"
		return 1
	fi

	local curr_dir="${PWD}"
	local curr_entry=$curr_dir
	#if there's comments - add them
	if [[ $# -ne 0 ]]; then
		curr_entry=$curr_dir" # $*"
	fi

	if ! grep -Fxq "$curr_dir" $BM_DIR_WORK; then
		echo "$curr_entry" >> $BM_DIR_WORK
		echo "$curr_dir added to bookmarks"
	else
		echo "$curr_dir already in bookmarks"
	fi
}

# Get login/logout entries
function get_log_entries(){
	cd $WIT_REPORTS;
	mv suspend_logs{,_old}; journalctl --no-pager | egrep 'systemd-sleep'
	mv syslogs_reboots{,_old}; journalctl --no-pager | \grep -B5 -A1 $'\-\-\ Reboot\ \-\-' > syslogs_reboots
	#LOGINLIST=$(last --time-format=iso --since 2018-04-01 ivo | head -n-2 | grep tty7 | egrep -v $'\(00:0[0-9]\)' | awk '{print $4,$6,$7,$8,$9,$10}')
	cd -;
}

function adbetext(){
	local text=$(cat <<< $(echo "$@" | sed 's, ,%s,g' ))
	echo "Sending to device text=[$text]"
	adb shell input text "$text"
}

function cp-stable-reports(){
	if [[ $(basename $(pwd)) != "android" ]]; then
		echo "You're probably not on the right folder"
		exit
	fi

	#local version=$(gpwd | cut -d"/" -f1 | tr -d "_")
	local last_reports=$(find ./build/5_0/reports -printf "%T@#%p \n" | sort -k1r | head -n2 | cut -f2 -d"#")

	cp-stable ${last_reports%% *}
	cp-stable ${last_reports#* }
}

function cp-stable-apk(){
	if [[ $(basename $(pwd)) != "android" ]]; then
		echo "You're probably not on the right folder"
		exit
	fi

	#local version=$(gpwd | cut -d"/" -f1 | tr -d "_")
	local last_apk=$(find . -name *.apk -type f -printf "%T@#%p \n" | sort -k1r | head -n1 | cut -f2 -d"#")

	cp-stable $last_apk
}

function cp-stable(){
	local fn=$(basename $1)
	local fn_noext=${fn%.*}
	local ext=${fn#*.}
	local branch=$(gpwd | cut -d"/" -f2)

	if [[ x$branch == x"devel" ]]; then
		new_ext=$(gpwd | cut -d"/" -f1 | tr -d ".")"devel"$ext
	elif [[ x$branch == x"task" ]]; then
		new_ext=$(gpwd | cut -d"/" -f3 | cut -d"-" -f1).$ext
	else
		echo "Cannot understand which branch you're in"
		exit
	fi

	cp $1 $WMC_ROOT/stable/$fn_noext.$new_ext
}

########################################################
#|NAME: GIT                     				       #
########################################################

function gls() {
	local dest_dir=$(glslocal | fzf --cycle)
	if [[ $dest_dir != '' ]]; then
		eval gcd $dest_dir
	fi
}